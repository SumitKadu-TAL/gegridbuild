// Generated by Haxe 3.4.2 (git build development @ e033003)
(function ($hx_exports) {
  "use strict";
  var Main = function () {};
  Main.__name__ = true;
  Main.main = function () {
    var a;
  };
  Math.__name__ = true;
  var appdash_AppDashLauncher = ($hx_exports["AppDashLauncher"] = function () {
    this.appDashAppsPath = null;
    this.appDashPath = null;
    this.appDashInstalled = false;
    this.resolveAppDashPath();
  });
  appdash_AppDashLauncher.__name__ = true;
  appdash_AppDashLauncher.prototype = {
    isAppDashInstalled: function () {
      return this.appDashInstalled;
    },
    launchAppOrDetails: function (appID) {
      this.launchAppDash(["launchordetails", appID]);
    },
    launchAppDash: function (params) {
      var cp = require("child_process").spawn;
      var dashSpawn = cp(this.appDashPath, params, { detached: true });
      dashSpawn.on("close", function (code) {
        haxe_Log.trace("App Dash Exited with code:", {
          fileName: "AppDashLauncher.hx",
          lineNumber: 42,
          className: "appdash.AppDashLauncher",
          methodName: "launchAppDash",
          customParams: [code],
        });
      });
    },
    resolveAppDashPath: function () {
      if (!geframework_utils_OSUtils.isDesktop()) {
        haxe_Log.trace("Unable to search for App Dash on web platform", {
          fileName: "AppDashLauncher.hx",
          lineNumber: 53,
          className: "appdash.AppDashLauncher",
          methodName: "resolveAppDashPath",
        });
        return;
      }
      var fs = require("fs");
      var path = require("path");
      var proc = process;
      var possibleFolders = [];
      possibleFolders.push(
        "GE Digital Energy" + path.sep + "GE App Dash" + path.sep
      );
      possibleFolders.push(
        "GE Digital Energy" + path.sep + "GE App Dashboard" + path.sep
      );
      possibleFolders.push(
        "GE Grid Solutions" + path.sep + "GE App Dash" + path.sep
      );
      possibleFolders.push("GE" + path.sep + "GE App Dash" + path.sep);
      possibleFolders.push("GE App Dash.app" + path.sep);
      var locations = [];
      var _g = 0;
      while (_g < possibleFolders.length) {
        var s = possibleFolders[_g];
        ++_g;
        locations.push(
          proc.env.HOMEDIR + path.sep + "Documents" + path.sep + s
        );
        locations.push(
          proc.env.HOMEDRIVE +
            path.sep +
            proc.env.HOMEPATH +
            path.sep +
            "Documents" +
            path.sep +
            s
        );
        locations.push(
          proc.env.HOMEDIR + path.sep + "My Documents" + path.sep + s
        );
        locations.push(
          proc.env.HOMEDRIVE +
            path.sep +
            proc.env.HOMEPATH +
            path.sep +
            "My Documents" +
            path.sep +
            s
        );
        locations.push(
          proc.env.HOME + path.sep + "Applications" + path.sep + s
        );
        locations.push(path.sep + "Applications" + path.sep + s);
        locations.push("file://${__dirname}/../../../../../");
      }
      var app = require("electron").remote.app;
      locations.push(app.getPath("documents"));
      var parentPath =
        proc.execPath +
        path.sep +
        ".." +
        path.sep +
        ".." +
        path.sep +
        ".." +
        path.sep;
      parentPath = path.normalize(parentPath);
      if (fs.existsSync(parentPath + "GE App Dash.exe")) {
        this.appDashInstalled = true;
        this.appDashPath = parentPath + "GE App Dash.exe";
        this.appDashAppsPath = parentPath + "apps" + path.sep;
        haxe_Log.trace(this.appDashPath, {
          fileName: "AppDashLauncher.hx",
          lineNumber: 95,
          className: "appdash.AppDashLauncher",
          methodName: "resolveAppDashPath",
        });
        return;
      }
      var _g1 = 0;
      while (_g1 < locations.length) {
        var l = locations[_g1];
        ++_g1;
        if (fs.existsSync(l)) {
          this.appDashInstalled = true;
          if (geframework_utils_OSUtils.isOSX()) {
            this.appDashPath =
              l + "Contents" + path.sep + "MacOS" + path.sep + "appdash";
            this.appDashAppsPath =
              l +
              "Contents" +
              path.sep +
              "Resources" +
              path.sep +
              "apps" +
              path.sep;
            haxe_Log.trace("OSX Found app dash @", {
              fileName: "AppDashLauncher.hx",
              lineNumber: 106,
              className: "appdash.AppDashLauncher",
              methodName: "resolveAppDashPath",
              customParams: [this.appDashPath, this.appDashAppsPath],
            });
          } else {
            this.appDashPath = l + "GE App Dash.exe";
            this.appDashAppsPath = l + "apps" + path.sep;
          }
          haxe_Log.trace(this.appDashPath, {
            fileName: "AppDashLauncher.hx",
            lineNumber: 111,
            className: "appdash.AppDashLauncher",
            methodName: "resolveAppDashPath",
          });
          return;
        }
      }
    },
  };
  var geframework_utils_Platform = {
    __ename__: true,
    __constructs__: ["iOS", "Web", "Desktop"],
  };
  geframework_utils_Platform.iOS = ["iOS", 0];
  geframework_utils_Platform.iOS.__enum__ = geframework_utils_Platform;
  geframework_utils_Platform.Web = ["Web", 1];
  geframework_utils_Platform.Web.__enum__ = geframework_utils_Platform;
  geframework_utils_Platform.Desktop = ["Desktop", 2];
  geframework_utils_Platform.Desktop.__enum__ = geframework_utils_Platform;
  var geframework_utils_OSUtils = function () {};
  geframework_utils_OSUtils.__name__ = true;
  geframework_utils_OSUtils.isFirefox = function () {
    var is_firefox =
      window.navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
    return is_firefox;
  };
  geframework_utils_OSUtils.isOSX = function () {
    if (geframework_utils_OSUtils.isDesktop() == false) {
      return false;
    }
    var os = require("os");
    var platform = os.platform();
    if (platform.toLowerCase().indexOf("darwin") > -1) {
      return true;
    }
    return false;
  };
  geframework_utils_OSUtils.isDesktop = function () {
    if (geframework_utils_OSUtils.isNWJS()) {
      return true;
    }
    if (geframework_utils_OSUtils.isElectron()) {
      return true;
    }
    return false;
  };
  geframework_utils_OSUtils.isElectron = function () {
    if (
      typeof window !== "undefined" &&
      window.process &&
      window.process.type === "renderer"
    ) {
      return true;
    }
    return false;
  };
  geframework_utils_OSUtils.isNWJS = function () {
    var isNodeWebkit = false;

    var isNode =
      typeof process !== "undefined" && typeof require !== "undefined";

    //Is this Node.js?
    if (isNode) {
      //If so, test for Node-Webkit
      try {
        isNodeWebkit = typeof require("nw.gui") !== "undefined";
      } catch (e) {
        isNodeWebkit = false;
      }
    }
    return isNodeWebkit;
  };
  geframework_utils_OSUtils.isIOS = function () {
    if (
      geframework_utils_OSUtils.testPlatform == geframework_utils_Platform.iOS
    ) {
      return true;
    }
    var iOS = false;
    var p = window.navigator.platform;
    if (p == "iPad" || p == "iPhone" || p == "iPod") {
      iOS = true;
    }
    return iOS;
  };
  geframework_utils_OSUtils.isSafari = function () {
    var is_safari =
      window.navigator.userAgent.toLowerCase().indexOf("safari") > -1;
    return is_safari;
  };
  geframework_utils_OSUtils.isIE = function () {
    var is_ie = window.navigator.userAgent.toLowerCase().indexOf("msie") > -1;
    return is_ie;
  };
  geframework_utils_OSUtils.isIE11 = function () {
    var is_ie =
      window.navigator.userAgent.toLowerCase().indexOf("trident") > -1;
    return is_ie;
  };
  geframework_utils_OSUtils.isPhone = function () {
    var p = window.navigator.platform;
    if (p == "iPhone" || p == "iPod") {
      return true;
    }
    return false;
  };
  var haxe_Log = function () {};
  haxe_Log.__name__ = true;
  haxe_Log.trace = function (v, infos) {
    js_Boot.__trace(v, infos);
  };
  var js_Boot = function () {};
  js_Boot.__name__ = true;
  js_Boot.__unhtml = function (s) {
    return s
      .split("&")
      .join("&amp;")
      .split("<")
      .join("&lt;")
      .split(">")
      .join("&gt;");
  };
  js_Boot.__trace = function (v, i) {
    var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
    msg += js_Boot.__string_rec(v, "");
    if (i != null && i.customParams != null) {
      var _g = 0;
      var _g1 = i.customParams;
      while (_g < _g1.length) {
        var v1 = _g1[_g];
        ++_g;
        msg += "," + js_Boot.__string_rec(v1, "");
      }
    }
    var d;
    var tmp;
    if (typeof document != "undefined") {
      d = document.getElementById("haxe:trace");
      tmp = d != null;
    } else {
      tmp = false;
    }
    if (tmp) {
      d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
    } else if (typeof console != "undefined" && console.log != null) {
      console.log(msg);
    }
  };
  js_Boot.__string_rec = function (o, s) {
    if (o == null) {
      return "null";
    }
    if (s.length >= 5) {
      return "<...>";
    }
    var t = typeof o;
    if (t == "function" && (o.__name__ || o.__ename__)) {
      t = "object";
    }
    switch (t) {
      case "function":
        return "<function>";
      case "object":
        if (o instanceof Array) {
          if (o.__enum__) {
            if (o.length == 2) {
              return o[0];
            }
            var str = o[0] + "(";
            s += "\t";
            var _g1 = 2;
            var _g = o.length;
            while (_g1 < _g) {
              var i = _g1++;
              if (i != 2) {
                str += "," + js_Boot.__string_rec(o[i], s);
              } else {
                str += js_Boot.__string_rec(o[i], s);
              }
            }
            return str + ")";
          }
          var l = o.length;
          var i1;
          var str1 = "[";
          s += "\t";
          var _g11 = 0;
          var _g2 = l;
          while (_g11 < _g2) {
            var i2 = _g11++;
            str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2], s);
          }
          str1 += "]";
          return str1;
        }
        var tostr;
        try {
          tostr = o.toString;
        } catch (e) {
          return "???";
        }
        if (
          tostr != null &&
          tostr != Object.toString &&
          typeof tostr == "function"
        ) {
          var s2 = o.toString();
          if (s2 != "[object Object]") {
            return s2;
          }
        }
        var k = null;
        var str2 = "{\n";
        s += "\t";
        var hasp = o.hasOwnProperty != null;
        for (var k in o) {
          if (hasp && !o.hasOwnProperty(k)) {
            continue;
          }
          if (
            k == "prototype" ||
            k == "__class__" ||
            k == "__super__" ||
            k == "__interfaces__" ||
            k == "__properties__"
          ) {
            continue;
          }
          if (str2.length != 2) {
            str2 += ", \n";
          }
          str2 += s + k + " : " + js_Boot.__string_rec(o[k], s);
        }
        s = s.substring(1);
        str2 += "\n" + s + "}";
        return str2;
      case "string":
        return o;
      default:
        return String(o);
    }
  };
  String.__name__ = true;
  Array.__name__ = true;
  appdash_AppDashLauncher.DOC_FOLDER = "com.ge.appdash/Local Store/xml";
  appdash_AppDashLauncher.APP_LIST = "applist.xml";
  Main.main();
})(
  typeof exports != "undefined"
    ? exports
    : typeof window != "undefined"
    ? window
    : typeof self != "undefined"
    ? self
    : this
);
